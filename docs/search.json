[
  {
    "objectID": "index.html#clase-1-introducción-a-python-y-su-entorno-de-desarrollo",
    "href": "index.html#clase-1-introducción-a-python-y-su-entorno-de-desarrollo",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 1: Introducción a Python y su entorno de desarrollo",
    "text": "Clase 1: Introducción a Python y su entorno de desarrollo\n\nIntroducción a Python y su sintaxis básica.\nInstalación de paquetes en Python utilizando pip.\nUso de entornos virtuales para gestionar dependencias.\nFuentes primarias de consulta con Python, incluyendo la documentación oficial y la comunidad en línea.\nBuenas prácticas de programación en Python.\nComprendiendo el entorno de desarrollo de Python"
  },
  {
    "objectID": "index.html#clase-2-introducción-al-manejo-de-datos-en-python-con-pandas",
    "href": "index.html#clase-2-introducción-al-manejo-de-datos-en-python-con-pandas",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 2: Introducción al manejo de datos en Python con pandas",
    "text": "Clase 2: Introducción al manejo de datos en Python con pandas\n\nImportación de datos en Python desde diferentes fuentes utilizando la biblioteca pandas."
  },
  {
    "objectID": "index.html#clase-3-la-importancia-del-análisis-de-datos-y-reproducibilidad-con-funciones",
    "href": "index.html#clase-3-la-importancia-del-análisis-de-datos-y-reproducibilidad-con-funciones",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 3: La importancia del análisis de datos y reproducibilidad con funciones",
    "text": "Clase 3: La importancia del análisis de datos y reproducibilidad con funciones\n\nConceptos clave para el análisis efectivo de datos.\nIniciativas para abordar el temas sociales utilizando Python, como el uso de módulos como pandas em investigación académica."
  },
  {
    "objectID": "index.html#clase-4-principios-de-estadística-en-python",
    "href": "index.html#clase-4-principios-de-estadística-en-python",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 4: Principios de estadística en Python",
    "text": "Clase 4: Principios de estadística en Python\n\nConceptos estadísticos como variables aleatorias, funciones de distribución y medidas de tendencia central.\nAnálisis de variables numéricas utilizando módulos como scipy y pandas.\nAnálisis de variables categóricas con enfoque en la biblioteca pandas.\nOperaciones entre variables y cálculos estadísticos en Python."
  },
  {
    "objectID": "index.html#clase-5-limpieza-y-transformación-de-datos-con-pandas-en-python",
    "href": "index.html#clase-5-limpieza-y-transformación-de-datos-con-pandas-en-python",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 5: Limpieza y transformación de datos con pandas en Python",
    "text": "Clase 5: Limpieza y transformación de datos con pandas en Python\n\nRecodificación de variables y creación de nuevas variables a partir de datos existentes utilizando pandas.\nLimpieza de datos, tratamiento de valores vacíos y duplicados en Python.\nNormalización y estandarización de datos en Python.\nLas partes de un objeto DataFrame de pandas como clave (key) e índice (index) en el contexto de series de tiempo."
  },
  {
    "objectID": "index.html#clase-6-exploración-y-visualización-de-datos-con-matplotlib-y-seaborn-en-python",
    "href": "index.html#clase-6-exploración-y-visualización-de-datos-con-matplotlib-y-seaborn-en-python",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 6: Exploración y visualización de datos con Matplotlib y Seaborn en Python",
    "text": "Clase 6: Exploración y visualización de datos con Matplotlib y Seaborn en Python\n\nLa gramática de los gráficos utilizando bibliotecas como Matplotlib y Seaborn.\nVisualización de variables numéricas y categóricas con ejemplos prácticos en Python.\nPersonalización de gráficos, paletas de colores y etiquetas para mejorar la interpretación de los datos en Python."
  },
  {
    "objectID": "index.html#clase-7-pruebas-de-hipótesis-para-la-media-entre-grupos-en-python",
    "href": "index.html#clase-7-pruebas-de-hipótesis-para-la-media-entre-grupos-en-python",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 7: Pruebas de hipótesis para la media entre grupos en Python",
    "text": "Clase 7: Pruebas de hipótesis para la media entre grupos en Python\n\nIntroducción a las pruebas de hipótesis en Python.\nCasos de acuerdo a la varianza en los grupos (prueba t de Student) y casos de desbalance en los tamaños de los grupos.\nComparación y validación de estadísticas de grupo utilizando bibliotecas como SciPy."
  },
  {
    "objectID": "index.html#clase-8-análisis-de-correlación-y-modelos-de-regresión-en-python",
    "href": "index.html#clase-8-análisis-de-correlación-y-modelos-de-regresión-en-python",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 8: Análisis de correlación y modelos de regresión en Python",
    "text": "Clase 8: Análisis de correlación y modelos de regresión en Python\n\nEl modelo de mínimos cuadrados ordinarios con una sola variable en Python.\nInterpretación y validación de los parámetros de una regresión en Python.\nLa relación entre un modelo de regresión y la correlación de los datos en Python."
  },
  {
    "objectID": "index.html#clase-9-regresión-lineal-con-múltiples-variables-en-python",
    "href": "index.html#clase-9-regresión-lineal-con-múltiples-variables-en-python",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 9: Regresión lineal con múltiples variables en Python",
    "text": "Clase 9: Regresión lineal con múltiples variables en Python\n\nInclusión de variables dicotómicas en el modelo de regresión en Python.\nInterpretación de las estadísticas de rendimiento de los modelos de regresión, incluyendo R cuadrado y p-valores.\nSelección y comparación de modelos utilizando técnicas como el método de selección de características."
  },
  {
    "objectID": "index.html#clase-10-estudios-académicos",
    "href": "index.html#clase-10-estudios-académicos",
    "title": "Introducción al Lenguaje de Programación Python para Análisis Estadístico",
    "section": "Clase 10: Estudios académicos",
    "text": "Clase 10: Estudios académicos\n\nRevisión de la estructura de una investigación académica relacionada con la movilidad humana en Python.\nMétodos para abordar estadística desde la visualización y la disponibilidad de datos en Python.\nLecciones y métodos narrativos para abordar desde la estadística a la migración en Python."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introducción",
    "section": "",
    "text": "Las necesidades de formación de los ecuatorianos han cambiado drásticamente a raíz de la pandemia COVID-19. La era de la digitalización ha determinado que las habilidades digitales son hoy en día requisitos para el éxito en el mercado laboral, más no una garantía.\nAmérica Latina enfrenta un problema importante: el descalce de habilidades entre la oferta y la demanda laboral. Es decir, no existe un consenso entre las habilidades que se enseñan en las aulas y las necesidades que las empresas buscan suplir con las habilidades de sus trabajadores. El incremento del personal subcalificado en las distintas ocupaciones se suma al déficit de habilidades digitales. (Cepal, Seminario Regional de Desarrollo Social, 2023).\nLa formación en habilidades digitales representa un gran desafío para la academia en América Latina debido al descalce de habilidades entre la oferta y la demanda laboral. Ecuador presenta los porcentajes más bajos de adultos con altos niveles de logro en la resolución de problemas en ambientes digitales (5.3%) por debajo de países como Chile y Mexico (14.5% y 10.2%) que aun estando por encima de Ecuador, ilustran en conjunto la problemática que enfrenta la región. (CEPAL, base a datos PIAAC (Programa para la Evaluación Internacional de Competencias de Adultos), OCDE).\nPara superar esta problemática es necesario un cambio de enfoque en la manera en que se abordan las habilidades digitales y, por qué no, las habilidades que se imparten en las aulas. En primer lugar, se debe definir cuáles son las falencias de los sistemas educativos en los distintos niveles de educación acordes a cada etapa del desarrollo del individuo. Esta evaluación nos permitirá redireccionar la educación hacia un enfoque respetuoso, inclusivo y equitativo, que a su vez estén alineados con el sector productivo.\nQueda claro que superar esta problemática es una tarea que por definición debe ser articulada. Donde estudiantes, profesores, personal administrativo, gobierno y el sector productivo establezcan un dialogo proactivo en aras de garantizar una mejor calidad de la educación, el cierre de las brechas de oportunidades y la corrección del descalce entre la oferta y demanda laboral. Se han dado pasos importantes en esa dirección desde el sector gobierno del Ecuador al establecer un primer borrador sobre la calidad de evaluación de las habilidades digitales (INEVAL 2023). Así mismo, el crecimiento de la presencia centros de formación y capacitación dan cuenta de un avance paulatino hacía una sociedad con mayores oportunidades y beneficios sociales a partir de la educación.\nEs en este contexto, y en consonancia con las prioridades nacionales, el Centro de Investigación Estadística ERGOSTATS S.A.S (ERGOSTATS en adelante) determino como una de sus actividades principales la educación complementaria y alineada con los programas de formación académica oficiales de la educación superior del Ecuador.\nEn esta línea, desde 2021 ERGOSTATS se ha desempeñado en la planificación, ejecución y evaluación de cursos, talleres, webinars y charlas que fomenten la participación de la ciudadanía en espacios de aprendizaje sobre los usos, aplicaciones y experiencias en el análisis y visualización de datos, habilidades digitales altamente demandadas en el mercado laboral actual.\nA raíz de la experiencia de ERGOSTATS en el campo de la enseñanza complementaria se ha corroborado la presencia del descalce entre la oferta y demanda laborales y los desafíos que está representa para llevar a cabo la nivelación de los trabajadores hasta el nivel que exige el sector productivo. Un desafío adicional evidenciado por ERGOSTATS es la discriminación a través del precio, lo cual se ha convertido en una brecha de acceso para estudiantes que están cursando sus primeras etapas en la educación superior.\nEn vista de lo mencionado, y contemplando que la educación en términos de habilidades digitales debe ser accesible, oportuna y de calidad el Centro de Investigación Estadística ERGOSTATS S.A.S ha decidido emprender el programa “Nido del Buho”, una iniciativa que involucra a estudiantes, profesores y al personal de la academia para fomentar la educación desde una perspectiva articulada, solidaria y participativa.\n“Nido del Buho” busca vincular los esfuerzos de personal profesional con experiencia en el análisis estadístico de datos para contribuir a la reducción de las brechas entre tres elementos: las necesidades de educación complementaria de los estudiantes, las mallas curriculares que tienen componentes de programación y análisis de datos, y las necesidades de las empresas que confirman los distintos sectores económicos del país.\nDentro del componente 1 del proyecto (Planificación), se requiere el desarrollo de instrumentos y materiales de enseñanza que permita cubrir de manera efectiva el diseño curricular alineado a la malla curricular propuesta por las organizaciones estudiantiles. Mismo que deberá cumplir con los estándares, lineamientos, directrices, metodologías y manuales que ERGOSTATS ha diseñado para los cursos de formación y capacitación.\nPor otro lado, el componente 3 del proyecto (Ejecución) establece que la puesta en escena de los cursos debe estar determinada por las metodologías de enseñanza de ERGOSTATS respetando el diseño y estructura de clases adaptado al material desarrollado para cada caso específico.\nAmbos componentes son competencia del personal académico y administrativo de ERGOSTATS en conjunto con las organizaciones estudiantes. Para ello se ha llegado a la alianza académica con la Asociación de Estudiantes de la Carrera de Economía Cuantitativa de la Escuela Politécnica Nacional para la ejecución del curso “Introducción al lenguaje de programación Python para el análisis estadístico” en el contexto del programa “Nido del Búho”"
  },
  {
    "objectID": "Clase_1.html",
    "href": "Clase_1.html",
    "title": "Introducción a Python y su entorno de desarrollo",
    "section": "",
    "text": "Resumen\nEste capítulo introducimos Python como un lenguaje de programación orientado a objetos, destacando sus características clave como su sintaxis, gramática, entre otros. Exploramos la historia de Python, destacando la visión de Guido van Rossum de crear un lenguaje legible y fácil de mantener. Se subraya el carácter de código abierto de Python, resaltando su desarrollo y mantenimiento por una comunidad global de voluntarios como tu y como yo.\nDespues de este capítulo realizar la instalación de módulos o paquetes comunes en Python, como Pandas, NumPy, SciPy y Matplotlib, lo que hará más sencillo tu trabajo estadístico. Asi mismo, la sección sobre la búsqueda de ayuda con Python destaca recursos útiles como la documentación oficial, Stack Overflow, Real Python, Python Tutor y el uso de la función help(). Finalmente, se presentan buenas prácticas para programar en Python, especialmente enfocadas en aplicaciones estadísticas, y se proporciona una guía para instalar y configurar Python y Visual Studio Code, preparando al lector para un desarrollo efectivo y eficiente.\nPython es un lenguaje de programación orientado a objetos porque proporciona características que soportan la programación orientada a objetos, que incluye la definición de clases, la herencia y la encapsulación. En Python, todo es un objeto, incluyendo los números, las cadenas y las funciones.\nEs muy particular para cada lenguaje:\nEl orden importa como en este ejemplo:\nDe la misma manera:\npip es el sistema de gestión de paquetes de Python, que te permite instalar y administrar paquetes de software adicionales que no se incluyen en la biblioteca estándar de Python.\nAquí te mostramos cómo puedes instalar algunos paquetes comunes. Abre tu terminal o línea de comandos e introduce los siguientes comandos:\nRecuerda que debes tener instalado Python y pip en tu sistema para poder ejecutar estos comandos. Si estás utilizando un entorno virtual (lo cual es una buena práctica), estos paquetes se instalarán en el entorno virtual en lugar de en tu instalación global de Python.\nPara acceder a la documentación oficial de Python, puedes visitar el siguiente enlace: Documentación oficial de Python. Aquí encontrarás guías, tutoriales y referencias detalladas sobre el lenguaje y su biblioteca estándar.\nAdemás de la documentación oficial, aquí tienes tres fuentes adicionales de consulta para obtener ayuda con Python:\nPor ejemplo, durante el curso vamos a trabajar con Visual Studio Code, si tienes el siguiente código:\nCuando coloques el cursor sobre array o después de abrir el paréntesis, Visual Studio Code mostrará un tooltip con la ayuda de la función np.array.\nTambién puedes usar la función incorporada help() en la terminal de Python para obtener ayuda sobre una función. Por ejemplo:\nEsto imprimirá la documentación de la función np.array en la terminal.\nConsiserando que vamos a hacer aplicaciones estadísticas:\nTe dejamos una guía paso a paso para instalar Visual Studio Code y Python:\nCon estos pasos, deberías estar listo para empezar a programar en Python usando Visual Studio Code."
  },
  {
    "objectID": "Clase_1.html#cuál-fue-la-motivación-para-crear-python",
    "href": "Clase_1.html#cuál-fue-la-motivación-para-crear-python",
    "title": "Introducción a Python y su entorno de desarrollo",
    "section": "¿Cuál fue la motivación para crear Python?",
    "text": "¿Cuál fue la motivación para crear Python?\nPython fue creado por Guido van Rossum en 1989. La motivación principal era crear un lenguaje de alto nivel que fuera fácil de leer y de escribir. Guido quería que Python fuera un lenguaje que pudiera hacer las cosas de manera rápida, pero que también permitiera escribir código que fuera fácil de entender y de mantener. Guido trabajó en el proyecto durante su tiempo en el Centro para las Matemáticas y la Informática (CWI) en los Países Bajos."
  },
  {
    "objectID": "Clase_1.html#pyhton-un-lenguaje-open-source",
    "href": "Clase_1.html#pyhton-un-lenguaje-open-source",
    "title": "Introducción a Python y su entorno de desarrollo",
    "section": "Pyhton, un lenguaje open source",
    "text": "Pyhton, un lenguaje open source\nPython es un lenguaje de programación de código abierto. Esto significa que su código fuente es libremente disponible y puede ser distribuido y modificado. Python es desarrollado y mantenido por una comunidad de voluntarios de todo el mundo que colaboran a través de la Python Software Foundation.\n\n\nPuedes acceder a la Python Software Foundation en este enlace Python Software Foundation"
  },
  {
    "objectID": "Clase_2.html",
    "href": "Clase_2.html",
    "title": "Introducción al manejo de datos en Python con pandas",
    "section": "",
    "text": "Resumen\nEn la era digital actual, la capacidad de analizar y manejar datos se ha vuelto esencial en una variedad de disciplinas, incluida la economía. Python, un lenguaje de programación versátil y poderoso, se ha convertido en una herramienta fundamental para el análisis de datos.\nEn este capítulo, exploraremos cómo Python, en combinación con la biblioteca Pandas, puede potenciar tus habilidades en el manejo eficiente y efectivo de datos económicos.\nEn el corazón del análisis de datos con Python se encuentran las variables y los tipos de datos. Python ofrece una variedad de tipos estándar, incluyendo números, cadenas, listas, tuplas y diccionarios. En este subtema, exploraremos cómo declarar variables, comprender la dinámica de los tipos de datos, y aprovechar las estructuras fundamentales de almacenamiento de información. Al dominar el manejo de variables y tipos de datos, los analistas pueden organizar y manipular datos de manera eficaz, allanando el camino para un análisis preciso y significativo.\nVamos a ver cuales son los tipos de objetos más frecuentes en Python:\nMientras que ahora te presentamos los tipos de variable que\nUsos:\nUsos:\nUsos:\nLa información proviene de diversas fuentes: hojas de cálculo, bases de datos, archivos CSV, y más. En este subcapítulo, aprenderemos cómo Python, junto con la biblioteca Pandas, puede funcionar como un puente eficaz para importar y manipular datos de diferentes fuentes. Este proceso es fundamental para transformar datos crudos en conocimientos significativos.\nUtilizaremos las tablas llamadas IMP_SRI.xlsx, ventas_SRI.CSV, riesgo_pais.txt\nEn el análisis de datos con Python, las estructuras de control como ‘if’, ‘for’, y ‘while’ desempeñan un papel clave en la manipulación y procesamiento eficiente y ordenado de datos.\nLa estructura condicional ‘if’ permite tomar decisiones basadas en condiciones específicas, mientras que los bucles ‘for’ y ‘while’ posibilitan recorrer conjuntos de datos y realizar iteraciones, respectivamente. Estas herramientas permiten a los analistas personalizar el flujo de ejecución de sus programas, optimizando la manipulación de datos y simplificando tareas repetitivas en el análisis de datos.\nPrimero veamos algunos ejemplos sencillos:\nEn Python, el bucle for se utiliza para iterar sobre una secuencia (como una lista, tupla, diccionario, conjunto o cadena) o cualquier otro objeto iterable.\nVeamos un ejemplo, si tienes un vector adicional llamado impuestos y quieres calcular el ratio de utilidad después de impuestos a costo, puedes hacerlo de la siguiente manera:\nLas funciones en Python representan bloques de código reutilizables que promueven la modularidad y organización en el análisis de datos. En este subtema, exploraremos la creación y aplicación de funciones, permitiéndonos encapsular tareas específicas para su fácil reutilización. Aprenderemos a definir funciones con parámetros, gestionar valores de retorno y entender el ámbito de las variables. Al incorporar funciones en nuestro flujo de trabajo, no solo simplificamos el código, sino que también mejoramos la mantenibilidad y legibilidad, optimizando así el proceso de análisis de datos con Python."
  },
  {
    "objectID": "Clase_2.html#librería-pandas",
    "href": "Clase_2.html#librería-pandas",
    "title": "Introducción al manejo de datos en Python con pandas",
    "section": "Librería Pandas",
    "text": "Librería Pandas\nPandas, una biblioteca de Python diseñada específicamente para el análisis y manejos de datos, ofrece estructuras de datos flexibles y herramientas de manipulación que facilitan la tarea de explorar y comprender conjuntos de datos complejos.\nEn este curso, nos sumergiremos en el mundo de Pandas para descubrir cómo puede facilitar el análisis y la manipulación de datos económicos.\n\nObjetivos de hoy"
  },
  {
    "objectID": "Clase_2.html#que-es-un-dataframe",
    "href": "Clase_2.html#que-es-un-dataframe",
    "title": "Introducción al manejo de datos en Python con pandas",
    "section": "¿ Que es un DataFrame?",
    "text": "¿ Que es un DataFrame?\nUn DataFrame es una estructura de datos con dos dimensiones en la cual se puede guardar datos de distintos tipos (como caractéres, enteros, valores de punto flotante, factores y más) en columnas. Es similar a una hoja de cálculo o una tabla de SQL o el data.frame de R. Un DataFrame siempre tiene un índice (con inicio en 0). El índice refiere a la posición de un elemento en la estructura de datos. Primero vamos a importar pandas.\n\nimport pandas as pd\n\n\nEjemplo: Imaginemos que tenemos información sobre el rendimiento de nuestros amigos en diferentes juegos durante una semana. Queremos organizar estos datos de manera clara y fácil de entender, ¡y para eso usaremos Pandas!\n\n\n# Crear un DataFrame con los datos de rendimiento en juegos\ndatos = {\n    'Nombre': ['Juan', 'María', 'Carlos', 'Ana'],\n    'Juego 1 (puntos)': [150, 180, 130, 200],\n    'Juego 2 (puntos)': [120, 90, 110, 150],\n    'Juego 3 (puntos)': [200, 160, 180, 190]\n}\n\ndf = pd.DataFrame(datos)\n\n# Mostrar el DataFrame\nprint(df)\n\n\n\n¡Con Pandas, explorar y entender datos se vuelve tan fácil como jugar un juego!\n\nEn este ejemplo:\n\nLa columna Nombre contiene los nombres de nuestros amigos.\nLas columnas Juego 1 (puntos), Juego 2 (puntos), y Juego 3 (puntos) representan los puntos obtenidos por cada amigo en diferentes juegos.\n\nEl DataFrame nos permite organizar estos datos de manera clara. Ahora, podemos realizar diversas operaciones para entender mejor el rendimiento de cada amigo, como calcular promedios, encontrar el máximo puntaje, o incluso visualizar los datos de manera gráfica."
  },
  {
    "objectID": "Clase_2.html#importación-de-un-archivo-.xlsx",
    "href": "Clase_2.html#importación-de-un-archivo-.xlsx",
    "title": "Introducción al manejo de datos en Python con pandas",
    "section": "Importación de un archivo .xlsx",
    "text": "Importación de un archivo .xlsx\nEn la ciencia de datos, es común trabajar con conjuntos de datos almacenados en diversos formatos, y uno de los formatos populares para el almacenamiento de datos tabulares es el formato Excel (.xlsx). Pandas, una biblioteca de Python ampliamente utilizada para el análisis de datos, proporciona una funcionalidad sencilla y poderosa para importar datos desde archivos .xlsx.\nExploraremos cómo utilizar la biblioteca pandas para importar datos desde un archivo Excel (.xlsx) y cargarlos en un DataFrame.\n\nimp_sri = pd.read_excel (\"data/otras_fuentes/IMP_SRI.xlsx\")\nprint(df)\n\nAhora revisaremos los tipos de datos que contiene nuestro DataFrame con dataframe.dtypes\n\nint64 : para enteros de 64 bits\nfloat64: para números de punto flotante de 64 bits\nobject : para objetos de texto (cadenas o mixtos)\n\n\nObserva como en estas lineas de código revisamos los atributos de nuestro Pandas Dataframe, estos atributos nos dan idea de la estructura del dataframe.\n\n\nimp_sri.dtypes\n\nAhora revisamos el numbre de las variables (columnas)\n\nimp_sri.columns\n\nSi deseamos saber cuantas filas y columnas tiene nuestro DataFrame (df), lo hacemos con dataframe.shape, esto nos muestra que tenemos 18 observaciones (observaciones) con 5 variables (columnas)\n\nimp_sri.shape\n\n\n\nAsi mismo observa que algunos un Pandas Dataframe tiene atributos y métodos. En este caso describe() y head() son métodos que requieren o no argumentos. Siempre puedes usar el comando print(dir(df)) para revisar los métodos y atributos. Asi mismo no olvides que puedes usar help(df.describe) para recibir ayuda de Python.\nSi deseamos realizar una estadistica descriptiva rapida podemos utilizar dataframe.describe()\n\nimp_sri.describe()\n\nAhora si deseamos unicamente imprimir las 10 primeras observaciones lo realizamos de la siguiente manera utilizando dataframe.head(n) siendo n el número de observaciones que deseamos observar, en este caso 10.\n\nimp_sri.head(10)"
  },
  {
    "objectID": "Clase_2.html#importación-de-un-archivo-.csv",
    "href": "Clase_2.html#importación-de-un-archivo-.csv",
    "title": "Introducción al manejo de datos en Python con pandas",
    "section": "Importación de un archivo .CSV",
    "text": "Importación de un archivo .CSV\nLa importación de datos desde archivos en formato CSV (Comma-Separated Values) es una tarea común en el análisis de datos. Los archivos CSV son ampliamente utilizados debido a su simplicidad y compatibilidad con una variedad de aplicaciones. Pandas facilita la importación de datos CSV mediante la función read_csv().\nExploraremos cómo cargar datos desde un archivo CSV en un DataFrame utilizando pandas. Veremos cómo manejar archivos CSV que contienen información tabular y cómo aprovechar las capacidades de pandas para realizar operaciones sobre estos datos.\nImportaremos la tabla “ventas_SRI.csv”, la cual presenta un registro detallado de las ventas efectuadas en Ecuador por diversas industrias desde el 2006. Esta tabla distingue entre las ventas sujetas a impuestos del IVA al 12% y aquellas que están exentas de este impuesto, gravadas al 0%.\n\nventas_sri = pd.read_csv (\"data/otras_fuentes/ventas_SRI.csv\", delimiter = ';')\nprint(ventas_sri)\n\nAhora repliquemos lo que ya ralizamos anteriormente:\n\nventas_sri.dtypes\nventas_sri.columns\nventas_sri.describe()\nventas_sri.head (10)"
  },
  {
    "objectID": "Clase_2.html#importación-de-un-.txt",
    "href": "Clase_2.html#importación-de-un-.txt",
    "title": "Introducción al manejo de datos en Python con pandas",
    "section": "Importación de un .txt",
    "text": "Importación de un .txt\nEn el ámbito económico, la importación efectiva de datos es esencial para desentrañar patrones y tendencias clave. En este subsubcapítulo, exploraremos cómo utilizar pandas en Python para importar datos desde archivos de texto (.txt), una tarea crucial para analistas económicos y profesionales del sector. Desde indicadores económicos hasta tasas de cambio y riesgo país, aprenderemos a convertir estos datos textuales en estructuras tabulares (DataFrames). Abordaremos desafíos específicos, como la elección de codificaciones y la gestión de delimitadores, proporcionando habilidades prácticas para aprovechar al máximo la información contenida en archivos de texto y potenciar el análisis económico con datos fiables.\nImportaremos el documento riesgo_pais_1.txt donde describe el riesgo país del Ecuador desde el 2004.\n\nriesgo_pais = pd.read_table('data/otras_fuentes/riesgo_pais_1.txt', delimiter='\\t')\n# El parámetro encoding='latin-1' que se proporciona al leer un archivo con pandas especifica la codificación de caracteres que se utilizará para decodificar el contenido del archivo de texto.\n\nprint(riesgo_pais)"
  },
  {
    "objectID": "Clase_2.html#if-el-operador-condicional",
    "href": "Clase_2.html#if-el-operador-condicional",
    "title": "Introducción al manejo de datos en Python con pandas",
    "section": "if el operador condicional",
    "text": "if el operador condicional\nEl comando if en Python no funciona directamente con vectores como lo haría en lenguajes como R o MATLAB. En Python, tendrías que iterar sobre los elementos del vector y aplicar la condición if a cada elemento.\nPor ejemplo, si tienes dos listas, utilidad y costo, y quieres verificar si la relación utilidad/costo es mayor o menor que 1 para cada elemento, podrías hacer algo como esto:\n\nutilidad = [10, 20, 30, 40, 50]\ncosto = [20, 20, 30, 40, 40]\n\nfor u, c in zip(utilidad, costo):\n    ratio = u / c\n    if ratio < 1:\n        print(f\"Deficit: La utilidad {u} es menor que el costo {c}.\")\n    elif ratio == 1:\n        print(f\"Equilibrio: La utilidad {u} es igual al costo {c}.\")\n    else:\n        print(f\"Ganancia: La utilidad {u} es mayor que el costo {c}.\")\n\n\n\nEn este código, zip(utilidad, costo) empareja cada elemento de utilidad con el correspondiente elemento de costo. Luego, para cada par de valores, calculamos el ratio u / c y usamos una estructura if para imprimir un mensaje basado en si el ratio es menor que, igual a, o mayor que 1.\nAlgunas consideraciones importantes al usar if en Python:\n\nPython usa indentación para delimitar bloques de código. Asegúrate de indentar correctamente tu código dentro de la estructura if.\nPython usa == para comparar igualdad, != para desigualdad, < para menor que, > para mayor que, <= para menor o igual que, y >= para mayor o igual que.\nPuedes usar and y or para combinar condiciones, y not para negar una condición.\nLa estructura if puede ser seguida por una o más estructuras elif (abreviatura de “else if”) para comprobar múltiples condiciones, y una estructura else para especificar qué hacer si ninguna de las condiciones anteriores es verdadera."
  }
]