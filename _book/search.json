[
  {
    "objectID": "Clase_2.html",
    "href": "Clase_2.html",
    "title": "3  Clase 2:Introducción al manejo de datos en Python con pandas",
    "section": "",
    "text": "4 Clase 2: Introducción al manejo de datos en Python con pandas\nEn la era digital actual, la capacidad de analizar y manejar datos se ha vuelto esencial en una variedad de disciplinas, incluida la economía. Python, un lenguaje de programación versátil y poderoso, se ha convertido en una herramienta fundamental para el análisis de datos.\nEn este capítulo, exploraremos cómo Python, en combinación con la biblioteca Pandas, puede potenciar tus habilidades en el manejo eficiente y efectivo de datos económicos.\nEn el análisis de datos con Python, las estructuras de control como ‘if’, ‘for’, y ‘while’ desempeñan un papel clave en la manipulación y procesamiento eficiente de datos. La estructura condicional ‘if’ permite tomar decisiones basadas en condiciones específicas, mientras que los bucles ‘for’ y ‘while’ posibilitan recorrer conjuntos de datos y realizar iteraciones, respectivamente. Estas herramientas permiten a los analistas personalizar el flujo de ejecución de sus programas, optimizando la manipulación de datos y simplificando tareas repetitivas en el análisis de datos.\nLas funciones en Python representan bloques de código reutilizables que promueven la modularidad y organización en el análisis de datos. En este subtema, exploraremos la creación y aplicación de funciones, permitiéndonos encapsular tareas específicas para su fácil reutilización. Aprenderemos a definir funciones con parámetros, gestionar valores de retorno y entender el ámbito de las variables. Al incorporar funciones en nuestro flujo de trabajo, no solo simplificamos el código, sino que también mejoramos la mantenibilidad y legibilidad, optimizando así el proceso de análisis de datos con Python.\nEn el corazón del análisis de datos con Python se encuentran las variables y los tipos de datos. Python ofrece una variedad de tipos estándar, incluyendo números, cadenas, listas, tuplas y diccionarios. En este subtema, exploraremos cómo declarar variables, comprender la dinámica de los tipos de datos, y aprovechar las estructuras fundamentales de almacenamiento de información. Al dominar el manejo de variables y tipos de datos, los analistas pueden organizar y manipular datos de manera eficaz, allanando el camino para un análisis preciso y significativo.\n-Cadenas:"
  },
  {
    "objectID": "Clase_2.html#librería-pandas",
    "href": "Clase_2.html#librería-pandas",
    "title": "3  Clase 2:Introducción al manejo de datos en Python con pandas",
    "section": "4.1 Librería Pandas",
    "text": "4.1 Librería Pandas\nPandas, una biblioteca de Python diseñada específicamente para el análisis y manejos de datos, ofrece estructuras de datos flexibles y herramientas de manipulación que facilitan la tarea de explorar y comprender conjuntos de datos complejos.\nEn este curso, nos sumergiremos en el mundo de Pandas para descubrir cómo puede facilitar el análisis y la manipulación de datos económicos.\n\n4.1.1 Objetivos de hoy\n\nAprenderemos los conceptos básicos de Pandas, desde la creación de estructuras de datos hasta la manipulación de marcos de datos.\nAplicaremos los conocimientos adquiridos para realizar análisis de datos específicos relacionados con la economía.\n\n\nimport pandas as pd"
  },
  {
    "objectID": "Clase_2.html#que-es-un-dataframe",
    "href": "Clase_2.html#que-es-un-dataframe",
    "title": "3  Clase 2:Introducción al manejo de datos en Python con pandas",
    "section": "4.2 ¿ Que es un DataFrame?",
    "text": "4.2 ¿ Que es un DataFrame?\nUn DataFrame es una estructura de datos con dos dimensiones en la cual se puede guardar datos de distintos tipos (como caractéres, enteros, valores de punto flotante, factores y más) en columnas. Es similar a una hoja de cálculo o una tabla de SQL o el data.frame de R. Un DataFrame siempre tiene un índice (con inicio en 0). El índice refiere a la posición de un elemento en la estructura de datos.\nEjemplo:\nImaginemos que tenemos información sobre el rendimiento de nuestros amigos en diferentes juegos durante una semana. Queremos organizar estos datos de manera clara y fácil de entender, ¡y para eso usaremos Pandas!\n\n# Crear un DataFrame con los datos de rendimiento en juegos\ndatos = {\n    'Nombre': ['Juan', 'María', 'Carlos', 'Ana'],\n    'Juego 1 (puntos)': [150, 180, 130, 200],\n    'Juego 2 (puntos)': [120, 90, 110, 150],\n    'Juego 3 (puntos)': [200, 160, 180, 190]\n}\n\ndf = pd.DataFrame(datos)\n\n# Mostrar el DataFrame\nprint(df)\n\nEn este ejemplo:\n\nLa columna ‘Nombre’ contiene los nombres de nuestros amigos.\nLas columnas ‘Juego 1 (puntos)’, ‘Juego 2 (puntos)’, y ‘Juego 3 (puntos)’ representan los puntos obtenidos por cada amigo en diferentes juegos.\n\nEl DataFrame nos permite organizar estos datos de manera clara. Ahora, podemos realizar diversas operaciones para entender mejor el rendimiento de cada amigo, como calcular promedios, encontrar el máximo puntaje, o incluso visualizar los datos de manera gráfica.\n¡Con Pandas, explorar y entender datos se vuelve tan fácil como jugar un juego!"
  },
  {
    "objectID": "Clase_2.html#importación-de-datos-en-python-desde-diferentes-fuentes-utilizando-la-biblioteca-pandas.",
    "href": "Clase_2.html#importación-de-datos-en-python-desde-diferentes-fuentes-utilizando-la-biblioteca-pandas.",
    "title": "3  Clase 2:Introducción al manejo de datos en Python con pandas",
    "section": "4.3 Importación de datos en Python desde diferentes fuentes utilizando la biblioteca pandas. ",
    "text": "4.3 Importación de datos en Python desde diferentes fuentes utilizando la biblioteca pandas. \nLa información proviene de diversas fuentes: hojas de cálculo, bases de datos, archivos CSV, y más. En este subcapítulo, aprenderemos cómo Python, junto con la biblioteca Pandas, puede funcionar como un puente eficaz para importar y manipular datos de diferentes fuentes. Este proceso es fundamental para transformar datos crudos en conocimientos significativos.\nUtilizaremos las tablas llamadas IMP_SRI.xlsx, ventas_SRI.CSV, riesgo_pais.txt\n\n4.3.1 Importación de un archivo .xlsx\nEn la ciencia de datos, es común trabajar con conjuntos de datos almacenados en diversos formatos, y uno de los formatos populares para el almacenamiento de datos tabulares es el formato Excel (.xlsx). Pandas, una biblioteca de Python ampliamente utilizada para el análisis de datos, proporciona una funcionalidad sencilla y poderosa para importar datos desde archivos .xlsx.\nExploraremos cómo utilizar la biblioteca pandas para importar datos desde un archivo Excel (.xlsx) y cargarlos en un DataFrame.\n\nimp_sri = pd.read_excel (\"data/otras_fuentes/IMP_SRI.xlsx\")\nprint(df)\n\nAhora revisaremos los tipos de datos que contiene nuestro DataFrame\n\nint64 : para enteros de 64 bits\nfloat64: para números de punto flotante de 64 bits\nobject : para objetos de texto (cadenas o mixtos)\n\n\nimp_sri.dtypes\n\nAhora revisamos el numbre de las variables (columnas)\n\nimp_sri.columns\n\nSi deseamos saber cuantas filas y columnas tiene nuestro DataFrame (df), los hacemos con .shape.\nNos muestra que tenemos 18 observaciones (observaciones) con 5 variables (columnas)\n\nimp_sri.shape\n\nSi deseamos realizar una estadistica descriptiva rapida podemos utilizar .describe ()\n\nimp_sri.describe ()\n\nAhora si deseamos unicamente imprimir las 10 primeras observaciones lo realizamos de la siguiente manera utilizando .head(número de observaciones que deseo ver) :\n\nimp_sri.head (10)\n\n\n\n4.3.2 Importación de un archivo .CSV\nLa importación de datos desde archivos en formato CSV (Comma-Separated Values) es una tarea común en el análisis de datos. Los archivos CSV son ampliamente utilizados debido a su simplicidad y compatibilidad con una variedad de aplicaciones. Pandas facilita la importación de datos CSV mediante la función read_csv().\nExploraremos cómo cargar datos desde un archivo CSV en un DataFrame utilizando pandas. Veremos cómo manejar archivos CSV que contienen información tabular y cómo aprovechar las capacidades de pandas para realizar operaciones sobre estos datos.\nImportaremos la tabla “ventas_SRI.csv”, la cual presenta un registro detallado de las ventas efectuadas en Ecuador por diversas industrias desde el 2006. Esta tabla distingue entre las ventas sujetas a impuestos del IVA al 12% y aquellas que están exentas de este impuesto, gravadas al 0%.\n\nventas_sri = pd.read_csv (\"data/otras_fuentes/ventas_SRI.csv\", delimiter = ';')\nprint(ventas_sri)\n\nAhora repliquemos lo que ya ralizamos anteriormente:\n\nventas_sri.dtypes\n\n\nventas_sri.dtypes\n\n\nventas_sri.columns\n\n\nventas_sri.describe ()\n\n\nventas_sri.head (10)\n\n\n\n4.3.3 Importación de un .txt\nEn el ámbito económico, la importación efectiva de datos es esencial para desentrañar patrones y tendencias clave. En este subsubcapítulo, exploraremos cómo utilizar pandas en Python para importar datos desde archivos de texto (.txt), una tarea crucial para analistas económicos y profesionales del sector. Desde indicadores económicos hasta tasas de cambio y riesgo país, aprenderemos a convertir estos datos textuales en estructuras tabulares (DataFrames). Abordaremos desafíos específicos, como la elección de codificaciones y la gestión de delimitadores, proporcionando habilidades prácticas para aprovechar al máximo la información contenida en archivos de texto y potenciar el análisis económico con datos fiables.\nImportaremos el documento riesgo_pais_1.txt donde describe el riesgo país del Ecuador desde el 2004.\n\nriesgo_pais = pd.read_table('data/otras_fuentes/riesgo_pais_1.txt', delimiter='\\t')\n# El parámetro encoding='latin-1' que se proporciona al leer un archivo con pandas especifica la codificación de caracteres que se utilizará para decodificar el contenido del archivo de texto.\n\nprint(riesgo_pais)"
  },
  {
    "objectID": "Clase_5.html",
    "href": "Clase_5.html",
    "title": "4  Clase 5:Limpieza y transformación de datos con pandas en Python",
    "section": "",
    "text": "5 Limpieza y transformación de datos con pandas en Python"
  },
  {
    "objectID": "Clase_5.html#recodificación-de-variables-y-creación-de-nuevas-variables-a-partir-de-datos-existentes-utilizando-pandas.",
    "href": "Clase_5.html#recodificación-de-variables-y-creación-de-nuevas-variables-a-partir-de-datos-existentes-utilizando-pandas.",
    "title": "4  Clase 5:Limpieza y transformación de datos con pandas en Python",
    "section": "5.1 Recodificación de variables y creación de nuevas variables a partir de datos existentes utilizando pandas.",
    "text": "5.1 Recodificación de variables y creación de nuevas variables a partir de datos existentes utilizando pandas."
  },
  {
    "objectID": "Clase_5.html#limpieza-de-datos-tratamiento-de-valores-vacíos-y-duplicados-en-python.",
    "href": "Clase_5.html#limpieza-de-datos-tratamiento-de-valores-vacíos-y-duplicados-en-python.",
    "title": "4  Clase 5:Limpieza y transformación de datos con pandas en Python",
    "section": "5.2 Limpieza de datos, tratamiento de valores vacíos y duplicados en Python.",
    "text": "5.2 Limpieza de datos, tratamiento de valores vacíos y duplicados en Python."
  },
  {
    "objectID": "Clase_5.html#normalización-y-estandarización-de-datos-en-python.",
    "href": "Clase_5.html#normalización-y-estandarización-de-datos-en-python.",
    "title": "4  Clase 5:Limpieza y transformación de datos con pandas en Python",
    "section": "5.3 Normalización y estandarización de datos en Python.",
    "text": "5.3 Normalización y estandarización de datos en Python."
  },
  {
    "objectID": "Clase_5.html#las-partes-de-un-objeto-dataframe-de-pandas-como-clave-key-e-índice-index-en-el-contexto-de-series-de-tiempo.",
    "href": "Clase_5.html#las-partes-de-un-objeto-dataframe-de-pandas-como-clave-key-e-índice-index-en-el-contexto-de-series-de-tiempo.",
    "title": "4  Clase 5:Limpieza y transformación de datos con pandas en Python",
    "section": "5.4 Las partes de un objeto DataFrame de pandas como clave (key) e índice (index) en el contexto de series de tiempo.",
    "text": "5.4 Las partes de un objeto DataFrame de pandas como clave (key) e índice (index) en el contexto de series de tiempo."
  },
  {
    "objectID": "Clase_1.html",
    "href": "Clase_1.html",
    "title": "2  Untitled",
    "section": "",
    "text": "3 Los elementos de un lenguaje de programación\nEs muy particular para cada lenguaje:\nEl orden importa como en este ejemplo:\nDe la misma manera:\npip es el sistema de gestión de paquetes de Python, que te permite instalar y administrar paquetes de software adicionales que no se incluyen en la biblioteca estándar de Python.\nAquí te muestro cómo puedes instalar algunos paquetes comunes. Abre tu terminal o línea de comandos e introduce los siguientes comandos:\nRecuerda que debes tener instalado Python y pip en tu sistema para poder ejecutar estos comandos. Si estás utilizando un entorno virtual (lo cual es una buena práctica), estos paquetes se instalarán en el entorno virtual en lugar de en tu instalación global de Python.\nPara acceder a la documentación oficial de Python, puedes visitar el siguiente enlace: Documentación oficial de Python. Aquí encontrarás guías, tutoriales y referencias detalladas sobre el lenguaje y su biblioteca estándar.\nAdemás de la documentación oficial, aquí tienes tres fuentes adicionales de consulta para obtener ayuda con Python:\nRecuerda que la mejor manera de aprender es practicando. No dudes en experimentar y probar cosas por ti mismo.\nConsiserando que vamos a hacer aplicaciones estadísticas:\nTe dejamos una guía paso a paso para instalar Visual Studio Code y Python:\nCon estos pasos, deberías estar listo para empezar a programar en Python usando Visual Studio Code."
  },
  {
    "objectID": "Clase_1.html#python-un-lenguaje-de-programación-orientado-a-objetos",
    "href": "Clase_1.html#python-un-lenguaje-de-programación-orientado-a-objetos",
    "title": "2  Untitled",
    "section": "2.1 Python, un lenguaje de programación orientado a objetos",
    "text": "2.1 Python, un lenguaje de programación orientado a objetos\nPython es un lenguaje de programación orientado a objetos porque proporciona características que soportan la programación orientada a objetos, que incluye la definición de clases, la herencia y la encapsulación. En Python, todo es un objeto, incluyendo los números, las cadenas y las funciones."
  },
  {
    "objectID": "Clase_1.html#cuál-fue-la-motivación-para-crear-python",
    "href": "Clase_1.html#cuál-fue-la-motivación-para-crear-python",
    "title": "2  Untitled",
    "section": "2.2 ¿Cuál fue la motivación para crear Python?",
    "text": "2.2 ¿Cuál fue la motivación para crear Python?\nPython fue creado por Guido van Rossum en 1989. La motivación principal era crear un lenguaje de alto nivel que fuera fácil de leer y de escribir. Guido quería que Python fuera un lenguaje que pudiera hacer las cosas de manera rápida, pero que también permitiera escribir código que fuera fácil de entender y de mantener. Guido trabajó en el proyecto durante su tiempo en el Centro para las Matemáticas y la Informática (CWI) en los Países Bajos."
  },
  {
    "objectID": "Clase_1.html#pyhton-un-lenguahe-open-source",
    "href": "Clase_1.html#pyhton-un-lenguahe-open-source",
    "title": "2  Untitled",
    "section": "2.3 Pyhton, un lenguahe open source",
    "text": "2.3 Pyhton, un lenguahe open source\nPython es un lenguaje de programación de código abierto. Esto significa que su código fuente es libremente disponible y puede ser distribuido y modificado. Python es desarrollado y mantenido por una comunidad de voluntarios de todo el mundo que colaboran a través de la Python Software Foundation.\n\n\nPuedes acceder a la Python Software Foundation en este enlace Python Software Foundation"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mybook",
    "section": "",
    "text": "Clase 1: Introducción a Python y su entorno de desarrollo ● Introducción a Python y su sintaxis básica. ● Instalación de paquetes en Python utilizando pip. ● Uso de entornos virtuales para gestionar dependencias. ● Fuentes primarias de consulta con Python, incluyendo la documentación oficial y la comunidad en línea. ● Buenas prácticas de programación en Python. ● Comprendiendo el entorno de desarrollo de Python, como Jupyter Notebook. Clase 2: Introducción al manejo de datos en Python con pandas ● Importación de datos en Python desde diferentes fuentes utilizando la biblioteca pandas. Clase 3: La importancia del análisis de datos (Conceptual) ● Conceptos clave para el análisis efectivo de datos. ● Iniciativas para abordar el temas sociales utilizando Python, como el uso de módulos como pandas em investigación académica. Clase 4: Principios de estadística en Python ● Conceptos estadísticos como variables aleatorias, funciones de distribución y medidas de tendencia central. ● Análisis de variables numéricas utilizando módulos como scipy y pandas. ● Análisis de variables categóricas con enfoque en la biblioteca pandas. ● Operaciones entre variables y cálculos estadísticos en Python. Clase 5: Limpieza y transformación de datos con pandas en Python ● Recodificación de variables y creación de nuevas variables a partir de datos existentes utilizando pandas. ● Limpieza de datos, tratamiento de valores vacíos y duplicados en Python. ● Normalización y estandarización de datos en Python. ● Las partes de un objeto DataFrame de pandas como clave (key) e índice (index) en el contexto de series de tiempo. Clase 6: Exploración y visualización de datos con Matplotlib y Seaborn en Python ● La gramática de los gráficos utilizando bibliotecas como Matplotlib y Seaborn. ● Visualización de variables numéricas y categóricas con ejemplos prácticos en Python. ● Personalización de gráficos, paletas de colores y etiquetas para mejorar la interpretación de los datos en Python. Clase 7: Pruebas de hipótesis para la media entre grupos en Python ● Introducción a las pruebas de hipótesis en Python. ● Casos de acuerdo a la varianza en los grupos (prueba t de Student) y casos de desbalance en los tamaños de los grupos. ● Comparación y validación de estadísticas de grupo utilizando bibliotecas como SciPy. Clase 8: Análisis de correlación y modelos de regresión en Python ● El modelo de mínimos cuadrados ordinarios con una sola variable en Python. ● Interpretación y validación de los parámetros de una regresión en Python. ● La relación entre un modelo de regresión y la correlación de los datos en Python. Clase 9: Regresión lineal con múltiples variables en Python ● Inclusión de variables dicotómicas en el modelo de regresión en Python. ● Interpretación de las estadísticas de rendimiento de los modelos de regresión, incluyendo R cuadrado y p-valores. ● Selección y comparación de modelos utilizando técnicas como el método de selección de características. Clase 10: Estudios académicos ● Revisión de la estructura de una investigación académica relacionada con la movilidad humana en Python. ● Métodos para abordar estadística desde la visualización y la disponibilidad de datos en Python. ● Lecciones y métodos narrativos para abordar desde la estadística a la migración en Python."
  }
]