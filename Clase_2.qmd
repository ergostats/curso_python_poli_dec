---
title: "Clase 2:Introducción al manejo de datos en Python con pandas"
author: "Paul Yungan"
format: html
editor: visual
---

# Clase 2: Introducción al manejo de datos en Python con pandas  

En la era digital actual, la capacidad de analizar y manejar datos se ha vuelto esencial en una variedad de disciplinas, incluida la economía. Python, un lenguaje de programación versátil y poderoso, se ha convertido en una herramienta fundamental para el análisis de datos. 

En este capítulo, exploraremos cómo Python, en combinación con la biblioteca Pandas, puede potenciar tus habilidades en el manejo eficiente y efectivo de datos económicos.

## Librería Pandas 
Pandas, una biblioteca de Python diseñada específicamente para el análisis y manejos de datos, ofrece estructuras de datos flexibles y herramientas de manipulación que facilitan la tarea de explorar y comprender conjuntos de datos complejos. 

En este curso, nos sumergiremos en el mundo de Pandas para descubrir cómo puede facilitar el análisis y la manipulación de datos económicos.

### Objetivos de hoy

-  Aprenderemos los conceptos básicos de Pandas, desde la creación de estructuras de datos hasta la manipulación de marcos de datos.
- Aplicaremos los conocimientos adquiridos para realizar análisis de datos específicos relacionados con la economía.

```{python}
import pandas as pd
```

## ¿ Que es un DataFrame?
Un DataFrame es una estructura de datos con dos dimensiones en la cual se puede guardar datos de distintos tipos (como caractéres, enteros, valores de punto flotante, factores y más) en columnas. Es similar a una hoja de cálculo o una tabla de SQL o el data.frame de R. Un DataFrame siempre tiene un índice (con inicio en 0). El índice refiere a la posición de un elemento en la estructura de datos.

Ejemplo:

Imaginemos que tenemos información sobre el rendimiento de nuestros amigos en diferentes juegos durante una semana. Queremos organizar estos datos de manera clara y fácil de entender, ¡y para eso usaremos Pandas!

```{python}
# Crear un DataFrame con los datos de rendimiento en juegos
datos = {
    'Nombre': ['Juan', 'María', 'Carlos', 'Ana'],
    'Juego 1 (puntos)': [150, 180, 130, 200],
    'Juego 2 (puntos)': [120, 90, 110, 150],
    'Juego 3 (puntos)': [200, 160, 180, 190]
}

df = pd.DataFrame(datos)

# Mostrar el DataFrame
print(df)
```
En este ejemplo:

- La columna 'Nombre' contiene los nombres de nuestros amigos.
- Las columnas 'Juego 1 (puntos)', 'Juego 2 (puntos)', y 'Juego 3 (puntos)' representan los puntos obtenidos por cada amigo en diferentes juegos.

El DataFrame nos permite organizar estos datos de manera clara. Ahora, podemos realizar diversas operaciones para entender mejor el rendimiento de cada amigo, como calcular promedios, encontrar el máximo puntaje, o incluso visualizar los datos de manera gráfica.

¡Con Pandas, explorar y entender datos se vuelve tan fácil como jugar un juego!


## Importación de datos en Python desde diferentes fuentes utilizando la biblioteca pandas. 
La información proviene de diversas fuentes: hojas de cálculo, bases de datos, archivos CSV, y más. En este subcapítulo, aprenderemos cómo Python, junto con la biblioteca Pandas, puede funcionar como un puente eficaz para importar y manipular datos de diferentes fuentes. Este proceso es fundamental para transformar datos crudos en conocimientos significativos.

Utilizaremos las tablas llamadas IMP_SRI.xlsx, ventas_SRI.CSV, riesgo_pais.txt 

### Importación de un archivo .xlsx

En la ciencia de datos, es común trabajar con conjuntos de datos almacenados en diversos formatos, y uno de los formatos populares para el almacenamiento de datos tabulares es el formato Excel (.xlsx). Pandas, una biblioteca de Python ampliamente utilizada para el análisis de datos, proporciona una funcionalidad sencilla y poderosa para importar datos desde archivos .xlsx.

Exploraremos cómo utilizar la biblioteca pandas para importar datos desde un archivo Excel (.xlsx) y cargarlos en un DataFrame.


```{python}
imp_sri = pd.read_excel ("data/otras_fuentes/IMP_SRI.xlsx")
print(df)
```
Ahora revisaremos los tipos de datos que contiene nuestro DataFrame

- int64 : para enteros de 64 bits
- float64: para números de punto flotante de 64 bits
- object : para objetos de texto (cadenas o mixtos)

```{python}
imp_sri.dtypes
```

Ahora revisamos el numbre de las variables (columnas)
```{python}
imp_sri.columns
```

Si deseamos saber cuantas filas y columnas tiene nuestro DataFrame (df), los hacemos con .shape.

Nos muestra que tenemos 18 observaciones (observaciones) con 5 variables (columnas)

```{python}
imp_sri.shape
```

Si deseamos realizar una estadistica descriptiva rapida podemos utilizar .describe ()

```{python}
imp_sri.describe ()
```

Ahora si deseamos unicamente imprimir las 10 primeras observaciones lo realizamos de la siguiente manera utilizando .head(número de observaciones que deseo ver) : 

```{python}
imp_sri.head (10)
```

### Importación de un archivo .CSV

La importación de datos desde archivos en formato CSV (Comma-Separated Values) es una tarea común en el análisis de datos. Los archivos CSV son ampliamente utilizados debido a su simplicidad y compatibilidad con una variedad de aplicaciones. Pandas facilita la importación de datos CSV mediante la función `read_csv()`.

Exploraremos cómo cargar datos desde un archivo CSV en un DataFrame utilizando pandas. Veremos cómo manejar archivos CSV que contienen información tabular y cómo aprovechar las capacidades de pandas para realizar operaciones sobre estos datos.

Importaremos la tabla "ventas_SRI.csv", la cual presenta un registro detallado de las ventas efectuadas en Ecuador por diversas industrias desde el 2006. Esta tabla distingue entre las ventas sujetas a impuestos del IVA al 12% y aquellas que están exentas de este impuesto, gravadas al 0%.

```{python}
ventas_sri = pd.read_csv ("data/otras_fuentes/ventas_SRI.csv", delimiter = ';')
print(ventas_sri)
```

Ahora repliquemos lo que ya ralizamos anteriormente:


```{python}
ventas_sri.dtypes
```

```{python}
ventas_sri.dtypes
```

```{python}
ventas_sri.columns
```

```{python}
ventas_sri.describe ()
```

```{python}
ventas_sri.head (10)
```
### Importación de un .txt

En el ámbito económico, la importación efectiva de datos es esencial para desentrañar patrones y tendencias clave. En este subsubcapítulo, exploraremos cómo utilizar pandas en Python para importar datos desde archivos de texto (.txt), una tarea crucial para analistas económicos y profesionales del sector. Desde indicadores económicos hasta tasas de cambio y riesgo país, aprenderemos a convertir estos datos textuales en estructuras tabulares (DataFrames). Abordaremos desafíos específicos, como la elección de codificaciones y la gestión de delimitadores, proporcionando habilidades prácticas para aprovechar al máximo la información contenida en archivos de texto y potenciar el análisis económico con datos fiables.

Importaremos el documento riesgo_pais_1.txt donde describe el riesgo país del Ecuador desde el 2004.
```{python}
riesgo_pais = pd.read_table('data/otras_fuentes/riesgo_pais_1.txt', delimiter='\t')
# El parámetro encoding='latin-1' que se proporciona al leer un archivo con pandas especifica la codificación de caracteres que se utilizará para decodificar el contenido del archivo de texto.

print(riesgo_pais)
```



# Estructuras de control: Python soporta las estructuras de control típicas como if, for y while.

En el análisis de datos con Python, las estructuras de control como 'if', 'for', y 'while' desempeñan un papel clave en la manipulación y procesamiento eficiente de datos. 
La estructura condicional 'if' permite tomar decisiones basadas en condiciones específicas, mientras que los bucles 'for' y 'while' posibilitan recorrer conjuntos de datos y realizar iteraciones, respectivamente. Estas herramientas permiten a los analistas personalizar el flujo de ejecución de sus programas, optimizando la manipulación de datos y simplificando tareas repetitivas en el análisis de datos.


```{python}

# Estructura if
if mi_variable == "Hola Mundo":
    print("¡Hola Mundo!")

# Estructura for
for i in mi_lista:
    print(i)

# Estructura while
contador = 0
while contador < 5:
    print(contador)
    contador += 1

```

# Funciones: En Python, una función es un bloque de código reutilizable que realiza una acción específica.

Las funciones en Python representan bloques de código reutilizables que promueven la modularidad y organización en el análisis de datos. En este subtema, exploraremos la creación y aplicación de funciones, permitiéndonos encapsular tareas específicas para su fácil reutilización. Aprenderemos a definir funciones con parámetros, gestionar valores de retorno y entender el ámbito de las variables. Al incorporar funciones en nuestro flujo de trabajo, no solo simplificamos el código, sino que también mejoramos la mantenibilidad y legibilidad, optimizando así el proceso de análisis de datos con Python.

```{python}
# Definición de una función
def mi_funcion():
    print("¡Hola desde mi función!")

# Llamada a la función
mi_funcion()
```

> Python es un lenguaje de programación orientada a objetos


# Variables y tipos de datos: Python tiene varios tipos de datos estándar disponibles: números, cadenas, listas, tuplas, diccionarios.
En el corazón del análisis de datos con Python se encuentran las variables y los tipos de datos. Python ofrece una variedad de tipos estándar, incluyendo números, cadenas, listas, tuplas y diccionarios. En este subtema, exploraremos cómo declarar variables, comprender la dinámica de los tipos de datos, y aprovechar las estructuras fundamentales de almacenamiento de información. Al dominar el manejo de variables y tipos de datos, los analistas pueden organizar y manipular datos de manera eficaz, allanando el camino para un análisis preciso y significativo.

```{python}
# Esto es una variable
mi_variable = "Hola Mundo"

# Esto es una lista
mi_lista = [1, 2, 3, 4, 5]

# Esto es un diccionario
mi_diccionario = {"clave": "valor"}
```

- Números 
```{python}
entero = 10
flotante = 3.14
complejo = 1 + 2j
```

-Cadenas:


```{python}
cadena_simple = 'Hola, mundo!'
cadena_doble = "¡Python es poderoso!"
```

- Listas:


```{python}
lista_numeros = [1, 2, 3, 4, 5]
lista_cadenas = ['manzana', 'banana', 'cereza']
```

- Tuplas: 


```{python}
tupla_colores = ('rojo', 'verde', 'azul')
tupla_coordenadas = (3.5, 7.2)
```

- Diccionarios:


```{python}
diccionario_edades = {'Juan': 25, 'María': 30, 'Carlos': 22}
diccionario_frutas = {'manzana': 3, 'banana': 5, 'cereza': 8}
```